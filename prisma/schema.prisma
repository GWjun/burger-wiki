generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  accounts      Account[]
  Authenticator Authenticator[]
  BrandLike     BrandLike[]
  ProductLike   ProductLike[]
  Review        Review[]
  ReviewLike    ReviewLike[]
  sessions      Session[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?
  user                 User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

model Nutrition {
  product_id BigInt   @id @default(autoincrement())
  calories   Decimal? @db.Decimal
  fat        Decimal? @db.Decimal
  protein    Decimal? @db.Decimal
  sugar      Decimal? @db.Decimal
  sodium     Decimal? @db.Decimal
  created_at DateTime @default(now()) @db.Timestamptz(6)
  Products   Product  @relation(fields: [product_id], references: [product_id], onDelete: NoAction, onUpdate: NoAction)
}

model Brand {
  id                   BigInt      @id(map: "Brands_pkey") @default(autoincrement())
  name                 String      @unique @db.VarChar
  description          String?
  logo_url             String?     @db.VarChar
  website_url          String?     @db.VarChar
  created_at           DateTime    @default(now()) @db.Timestamptz(6)
  likes_count          Int         @default(0)
  name_eng             String      @unique @db.VarChar
  background_image_url String?     @db.VarChar
  BrandLike            BrandLike[]
  Product              Product[]
}

model Product {
  product_id       BigInt        @id(map: "Products_pkey") @default(autoincrement())
  created_at       DateTime      @default(now()) @db.Timestamptz(6)
  name             String        @db.VarChar
  description      String?
  image_url        String?       @db.VarChar
  price            Decimal       @db.Decimal
  available        Boolean?      @default(true)
  category         String?       @db.VarChar
  shop_url         String?       @db.VarChar
  set_price        Decimal?      @db.Decimal
  description_full String?
  released_at      DateTime?     @db.Timestamptz(6)
  brand_name       String        @db.VarChar
  likes_count      Int           @default(0)
  dislikes_count   Int           @default(0)
  patty            Patty         @default(undefined)
  dev_comment      String?       @db.VarChar
  review_count     Int           @default(0)
  score_avg        Float         @default(0) @db.Real
  Nutrition        Nutrition?
  Brand            Brand         @relation(fields: [brand_name], references: [name], onDelete: NoAction, onUpdate: NoAction)
  ProductLike      ProductLike[]
  Review           Review[]
}

model ProductLike {
  id         BigInt   @id @default(autoincrement())
  userId     String
  product_id BigInt
  is_like    Boolean
  created_at DateTime @default(now()) @db.Timestamptz(6)
  Product    Product  @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction, map: "ProductLike_productId_fkey")
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, product_id], map: "unique_user_product")
  @@index([userId, product_id], map: "idx_user_product")
}

model Review {
  id             BigInt        @id @default(autoincrement())
  userId         String
  product_id     BigInt
  comment        String?
  consumed_at    DateTime      @db.Timestamptz(6)
  created_at     DateTime      @default(now()) @db.Timestamptz(6)
  score          Float         @db.Real
  likes_count    Int           @default(0)
  dislikes_count Int           @default(0)
  Product        Product       @relation(fields: [product_id], references: [product_id], onDelete: Cascade, onUpdate: NoAction, map: "Review_productId_fkey")
  User           User          @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  ReviewImage    ReviewImage[]
  ReviewLike     ReviewLike[]
}

model ReviewImage {
  id         BigInt   @id @default(autoincrement())
  review_id  BigInt
  image_url  String
  created_at DateTime @default(now()) @db.Timestamptz(6)
  Review     Review   @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model ReviewLike {
  id         BigInt   @id @default(autoincrement())
  userId     String
  review_id  BigInt
  is_like    Boolean
  created_at DateTime @default(now()) @db.Timestamptz(6)
  Review     Review   @relation(fields: [review_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, review_id], map: "unique_user_review")
  @@index([userId, review_id], map: "idx_user_review")
}

/// This model contains row level security and requires additional setup for migrations. Visit https://pris.ly/d/row-level-security for more info.
model BrandLike {
  id         BigInt   @id @default(autoincrement())
  userId     String
  brand_id   BigInt
  created_at DateTime @default(now()) @db.Timestamptz(6)
  Brand      Brand    @relation(fields: [brand_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User       User     @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([userId, brand_id], map: "unique_user_brand")
  @@index([userId, brand_id], map: "idx_user_brand")
}

enum Patty {
  meat
  shrimp
  chicken
  squid
  vegan
  undefined
}
